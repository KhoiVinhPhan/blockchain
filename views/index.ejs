<!DOCTYPE html>
<html>

<head>
	<title>Connect Metamask Wallet</title>
	<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.2/dist/css/bootstrap.min.css" rel="stylesheet"
		integrity="sha384-EVSTQN3/azprG1Anm3QDgpJLIm9Nao0Yz1ztcQTwFspd3yD65VohhpuuCOmLASjC" crossorigin="anonymous">
	<link rel="stylesheet" type="text/css" href="https://cdn.jsdelivr.net/npm/toastify-js/src/toastify.min.css">
	<script src="https://js.pusher.com/7.2/pusher.min.js"></script>
	<script>

	</script>
</head>

<body>
	<div class="container">
		<h1>
			<%= pageTitle %>! Version web
		</h1>
		<p>Buy coins with VISA</p>
		<button id="connectButton" class="btn btn-warning btn-block">Connect Wallet</button>
		<span id="addressWallet"></span>

		<div class="mt-3 d-none" id="areaInfoRootToken">
			<div>
				<h4>Get information wallet</h4>
				<div class="mb-1">
					<button class="btn btn-primary" id="tokenTotalSupplyButton">Total supply</button>
					<span id="tokenTotalSupplyShow"></span>
				</div>
			</div>

			<div>
				<h4>Mint and transfer token to address wallet</h4>
				<div class="mt-1">
					<label for="">Address wallet</label>
					<input id="addressReceiver" type="text" class="form-control"
						placeholder="Please input address wallet" aria-label="Please input address wallet"
						aria-describedby="button-addon2">
				</div>
				<div class="mt-1">
					<label for="">Amount</label>
					<input id="amountSendToken" type="number" class="form-control" placeholder="Please input amount"
						aria-describedby="button-addon2">
				</div>
				<button class="btn btn-warning mt-1" type="button" id="btnSendToken">Send token</button>
			</div>

			<div class="mt-3" id="transactionTokenRoot">

			</div>
		</div>



		<div class="mt-3 d-none" id="areaInfoToken">
			<div>
				<h4>Get information wallet</h4>
				<div class="mb-1">
					<button class="btn btn-primary" id="tokenBalanceButton">Balances</button>
					<span id="tokenBalanceShow"></span>
				</div>
				<div class="mb-1">
					<button class="btn btn-primary" id="tokenNameButton">Token name</button>
					<span id="tokenNameShow"></span>
				</div>
				<div class="mb-1">
					<button class="btn btn-primary" id="tokenSymbolButton">Token symbols</button>
					<span id="tokenSymbolShow"></span>
				</div>

			</div>

			<div id="listCourseShow">
				<h4>List course</h4>
				<table class="table">
					<thead>
						<tr>
							<th scope="col">#</th>
							<th scope="col">Name course</th>
							<th scope="col">Author</th>
							<th scope="col">Price (TRT token)</th>
							<th scope="col">Action</th>
						</tr>
					</thead>
					<tbody>
						<tr>
							<th scope="row">1</th>
							<td>Javascript video basic</td>
							<td>Account 3</td>
							<td>10000</td>
							<td>
								<!-- <button class="btn btn-success" id="btnApprove">Approve</button>
								<button class="btn btn-success" id="btnIncreaseAllowance">IncreaseAllowance</button> -->
								<button class="btn btn-success" id="btnTransferFrom">Buy</button>
							</td>
						</tr>
					</tbody>
				</table>
			</div>
			<div class="row mt-3">
				<div class="col-md-6 col-sm-12">
					<form>
						<h4>Buy TRT Token with Visa card</h4>
						<div class="mb-3">
							<label for="" class="form-label">Card informantion</label>
							<input required placeholder="4242 4242 4242 4242" maxlength="16" type="number"
								class="form-control" id="formNumberPayment">
						</div>
						<div class="mb-3">
							<div class="row">
								<div class="col-6"><input placeholder="MM/YY" type="text" class="form-control" id="">
								</div>
								<div class="col-6"><input placeholder="CVC" type="number" class="form-control" id="">
								</div>
							</div>
						</div>
						<div class="mb-3">
							<label for="" class="form-label">Amount (1 TRT token = 1$)</label>
							<div class="input-group mb-3">
								<span class="input-group-text">$</span>
								<input type="number" class="form-control" id="formAmountPayment">
							</div>
						</div>
						<div class="mb-3">
							<label for="" class="form-label">Buy TRT token for address wallet:</label>
							<input disabled placeholder="" type="" class="form-control" id="inputAddressWallet">
						</div>
						<div>
							<button class="btn btn-primary" type="button" id="btnBuyToken">Buy</button>
							<img width="25%"
								src="https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcR0GLJh19sn6AVFEV_iv3YGW2_-xLz5p2IekA&usqp=CAU"
								alt="">
						</div>
					</form>
				</div>

				<div class="mt-3" id="transactionTokenTeacher">

				</div>
			</div>
		</div>

	</div>

	<script src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.21.1/axios.min.js"></script>
	<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/toastify-js"></script>
	<!-- Include Axios library -->
	<script>
		// Init - Check connected wallet
		Pusher.logToConsole = true;
		var pusher = new Pusher('cf2d8ddd49b9307e093e', {
			cluster: 'ap1'
		});
		let addressAccount = '';
		window.ethereum.request({ method: 'eth_accounts' })
			.then((accounts) => {
				if (accounts != '') {
					document.getElementById('connectButton').disabled = true; // disable button when connect metamask done
					if (accounts == '0x3c37f1db4f1227de8d6d17c979565d28e6eaf0f9') { // accout root
						document.getElementById('addressWallet').innerHTML = `Wallet Address: ${accounts} (account Toratech)`;
						document.getElementById('areaInfoRootToken').classList.remove("d-none"); // Show info token

						// Pusher account root token
						var channel = pusher.subscribe(`buy-course-channel-0x3c37f1db4f1227de8d6d17c979565d28e6eaf0f9`);
						channel.bind(`buy-course-event-0x3c37f1db4f1227de8d6d17c979565d28e6eaf0f9`, function (data) {
							console.log(data);
							Toastify({
								text: `Notifications about blockchain transactions: ${data.message}`,
								duration: 2000,
								newWindow: true,
								gravity: "top", // `top` or `bottom`
								position: "right", // `left`, `center` or `right`
								stopOnFocus: true, // Prevents dismissing of toast on hover
								style: {
									background: "#00b09b",
								},
								onClick: function () { } // Callback after click
							}).showToast();


							document.getElementById('transactionTokenRoot').innerHTML = '';
							document.getElementById('transactionTokenRoot').innerHTML = `
								<h4>Transaction</h4>
								<p>A transaction is in progress</p>
								<ul>
									<li>Name course: <span>Javascript video basic</span></li>
									<li>Buyer: <span>account 2</span></li>
									<li>Recevier: <span>account 3</span></li>
									<li>Price: <span>10000 TRT</span></li>
									<li>Status: <span class="badge bg-primary">${data.message}</span></li>
								</ul>
							`;
						});
					} else if (accounts == '0xa66eb11a3029044aa564adbb1d744cd97b8ffaa4') { // account 3: teacher
						document.getElementById('addressWallet').innerHTML = `Wallet Address: ${accounts} (Teacher)`; // Add address wallet to element
						document.getElementById('areaInfoToken').classList.remove("d-none"); // Show info token
						document.getElementById('inputAddressWallet').value = accounts; // Add address wallet to input form
						document.getElementById('listCourseShow').classList.add('d-none');
						// Pusher account root token
						var channel = pusher.subscribe(`buy-course-channel-0xa66eb11a3029044aa564adbb1d744cd97b8ffaa4`);
						channel.bind(`buy-course-event-0xa66eb11a3029044aa564adbb1d744cd97b8ffaa4`, function (data) {
							console.log(JSON.stringify(data));
							Toastify({
								text: `Notifications about blockchain transactions: ${data.message}`,
								duration: 2000,
								newWindow: true,
								gravity: "top", // `top` or `bottom`
								position: "right", // `left`, `center` or `right`
								stopOnFocus: true, // Prevents dismissing of toast on hover
								style: {
									background: "#00b09b",
								},
								onClick: function () { } // Callback after click
							}).showToast();

							document.getElementById('transactionTokenTeacher').innerHTML = '';
							document.getElementById('transactionTokenTeacher').innerHTML = `
								<h4>Transaction</h4>
								<p>A transaction is in progress</p>
								<ul>
									<li>Name course: <span>Javascript video basic</span></li>
									<li>Buyer: <span>account 2</span></li>
									<li>Recevier: <span>account 3</span></li>
									<li>Total: <span>10000 TRT (You receive: 7000 TRT) (30% fee)</span></li>
									<li>Status: <span class="badge bg-primary">${data.message}</span></li>
								</ul>
							`;
						});
					} else {
						document.getElementById('addressWallet').innerHTML = `Wallet Address: ${accounts} (Student)`; // Add address wallet to element
						document.getElementById('areaInfoToken').classList.remove("d-none"); // Show info token
						document.getElementById('inputAddressWallet').value = accounts; // Add address wallet to input form
					}
					addressAccount = accounts;
				}
			})
			.catch((error) => {
				console.log('Error');
			});

		// Pusher all
		var channel = pusher.subscribe('my-channel');
		channel.bind('my-event', function (data) {
			console.log(JSON.stringify(data));
		});

		// Button click event (Connect wallet)
		const connectButton = document.getElementById('connectButton');
		connectButton.addEventListener('click', () => {
			// Check if Metamask is installed
			if (typeof window.ethereum !== 'undefined') {
				// Request Metamask to connect
				window.ethereum.request({ method: 'eth_requestAccounts' })
					.then((accounts) => {
						const selectedAddress = accounts[0];
						console.log('Connected to wallet:', selectedAddress);
						// Add your wallet connection logic here
						document.getElementById('connectButton').disabled = true; // disable button when connect metamask done
						if (selectedAddress == '0x3c37f1db4f1227de8d6d17c979565d28e6eaf0f9') { // accout root
							document.getElementById('addressWallet').innerHTML = `Wallet Address: ${selectedAddress}`; // Add address wallet to element
							document.getElementById('areaInfoRootToken').classList.remove("d-none"); // Show info token
						} else {
							document.getElementById('addressWallet').innerHTML = `Wallet Address: ${selectedAddress}`; // Add address wallet to element
							document.getElementById('areaInfoToken').classList.remove("d-none"); // Show info token
							document.getElementById('inputAddressWallet').value = accounts; // Add address wallet to input form
						}
						addressAccount = accounts;
					})
					.catch((error) => {
						console.log('Error connecting to wallet:', error);
						// Handle the connection error here
					});
			} else {
				console.log('Metamask not installed.');
				// Handle the case where Metamask is not installed
			}
		});

		// Button click event (get token balance)
		const tokenBalanceButton = document.getElementById('tokenBalanceButton');
		tokenBalanceButton.addEventListener('click', () => {
			axios.get(`http://localhost:3000/balance-of?address=${addressAccount}`)
				.then(response => {
					const data = response.data;
					document.getElementById('tokenBalanceShow').innerHTML = data.balanceOf;
				})
				.catch(error => {
					console.error(error);
				});

		});

		// Button click event (get token name)
		const getTokenNameButton = document.getElementById('tokenNameButton');
		getTokenNameButton.addEventListener('click', () => {
			axios.get('http://localhost:3000/name')
				.then(response => {
					const data = response.data;
					document.getElementById('tokenNameShow').innerHTML = data.name;
				})
				.catch(error => {
					console.error(error);
				});

		});

		// Button click event (get token symbol)
		const getTokenSymbolButton = document.getElementById('tokenSymbolButton');
		getTokenSymbolButton.addEventListener('click', () => {
			axios.get('http://localhost:3000/symbol')
				.then(response => {
					const data = response.data;
					document.getElementById('tokenSymbolShow').innerHTML = data.symbol;
				})
				.catch(error => {
					console.error(error);
				});

		});

		// Button click event (tokenAllowanceButton)
		// const getTokenAllowanceButton = document.getElementById('tokenAllowanceButton');
		// getTokenAllowanceButton.addEventListener('click', () => {
		// 	axios.get(`http://localhost:3000/allowance?address=${addressAccount}`)
		// 		.then(response => {
		// 			const data = response.data;
		// 			document.getElementById('tokenAllowanceShow').innerHTML = data.allowance;
		// 		})
		// 		.catch(error => {
		// 			console.error(error);
		// 		});

		// });

		// Button click event (get token total supply)
		const getTokenTotalSupplyButton = document.getElementById('tokenTotalSupplyButton');
		getTokenTotalSupplyButton.addEventListener('click', () => {
			axios.get('http://localhost:3000/total-supply')
				.then(response => {
					const data = response.data;
					document.getElementById('tokenTotalSupplyShow').innerHTML = data.totalSupply;
				})
				.catch(error => {
					console.error(error);
				});

		});

		// Button click event (buy token)
		const btnBuyToken = document.getElementById('btnBuyToken');
		btnBuyToken.addEventListener('click', () => {
			const params = {
				number: document.getElementById('formNumberPayment').value,
				amount: document.getElementById('formAmountPayment').value,
				addressWallet: addressAccount
			};

			if (params.number == '') {
				alert('Card nummber require input');
				return false;
			}
			if (params.amount == '') {
				alert('Amount require input');
				return false;
			}

			axios.post('http://localhost:3000/payment-coin', params)
				.then(response => {
					const data = response.data;
					alert('Success payment, check your wallet');
				})
				.catch(error => {
					console.error(error);
				});
		});

		// Button click event (send token by mint)
		const btnSendToken = document.getElementById('btnSendToken');
		btnSendToken.addEventListener('click', () => {
			const params = {
				addressReceiver: document.getElementById('addressReceiver').value,
				valueToken: document.getElementById('amountSendToken').value,
			};

			if (params.addressReceiver == '') {
				alert('addressReceiver require input');
				return false;
			}

			axios.post('http://localhost:3000/mint-transfer', params)
				.then(response => {
					const data = response.data;
					console.log("EJS: ", data);
				})
				.catch(error => {
					console.error(error);
				});
		});

		// Button click event (approve)
		// const getBtnApprove = document.getElementById('btnApprove');
		// getBtnApprove.addEventListener('click', () => {
		// 	const params = {
		// 		spender: addressAccount,
		// 		amount: '1000',
		// 	};

		// 	axios.post('http://localhost:3000/approve', params)
		// 		.then(response => {
		// 			const data = response.data;
		// 			console.log(data);
		// 		})
		// 		.catch(error => {
		// 			console.log('error approve');
		// 		});
		// }); 

		// btnIncreaseAllowance
		// const getBtnIncreaseAllowance = document.getElementById('btnIncreaseAllowance');
		// getBtnIncreaseAllowance.addEventListener('click', () => {
		// 	const params = {
		// 		spender: addressAccount,
		// 		amount: '1000',
		// 	};

		// 	axios.post('http://localhost:3000/increase-allownce', params)
		// 		.then(response => {
		// 			const data = response.data;
		// 			console.log(data);
		// 		})
		// 		.catch(error => {
		// 			console.log('error approve');
		// 		});
		// }); 

		// Button click event (transferfrom)
		const getBtnTransferFrom = document.getElementById('btnTransferFrom');
		getBtnTransferFrom.addEventListener('click', () => {
			document.getElementById('btnTransferFrom').innerHTML = 'Processing...'
			const params = {
				spender: addressAccount,
				amount: '1000',
			};

			axios.post('http://localhost:3000/approve-transfer', params)
				.then(response => {
					const data = response.data;
					console.log(data);
					if (data.status) {
						Toastify({
								text: `You have successfully purchased the course`,
								duration: 2000,
								newWindow: true,
								gravity: "top", // `top` or `bottom`
								position: "right", // `left`, `center` or `right`
								stopOnFocus: true, // Prevents dismissing of toast on hover
								style: {
									background: "#00b09b",
								},
								onClick: function () { } // Callback after click
							}).showToast();
							document.getElementById('btnTransferFrom').innerHTML = 'Complete!';
							document.getElementById('btnTransferFrom').disabled = true;
					}
				})
				.catch(error => {
					console.log('error transfer');
				});
		});

	</script>
</body>

</html>